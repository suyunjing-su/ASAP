name: 自动部署 SAP

on:
  workflow_dispatch:  # 只允许手动触发
    inputs:
      environment:
        description: '选择部署环境'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      region:
        description: '选择部署区域'
        required: true
        default: 'SG'
        type: choice
        options:
          - SG  # 新加坡
          - US  # 美国
      app_name:
        description: '应用名称（可选，留空则自动生成）'
        required: false
        default: ''

env:
  DOCKER_IMAGE: ${{ secrets.IMAGE }}
  MEMORY: 512M

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install CF CLI
      run: |
        wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
        echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
        sudo apt-get update
        sudo apt-get install -y cf8-cli

    - name: Determine CF API endpoint and app name
      run: |
        # 设置API端点
        if [ "${{ github.event.inputs.region }}" = "SG" ]; then
          echo "CF_API=https://api.cf.ap21.hana.ondemand.com" >> $GITHUB_ENV
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
          DEFAULT_APP_NAME="sg$RANDOM_STR"
        elif [ "${{ github.event.inputs.region }}" = "US" ]; then
          echo "CF_API=https://api.cf.us10-001.hana.ondemand.com" >> $GITHUB_ENV
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
          DEFAULT_APP_NAME="us$RANDOM_STR"
        fi
        
        # 设置应用名称（如果用户提供了则使用，否则使用默认）
        if [ -n "${{ github.event.inputs.app_name }}" ]; then
          echo "APP_NAME=${{ github.event.inputs.app_name }}" >> $GITHUB_ENV
        else
          echo "APP_NAME=$DEFAULT_APP_NAME" >> $GITHUB_ENV
        fi
        
        echo "使用API端点: $CF_API"
        echo "应用名称: $APP_NAME"

    - name: Login to Cloud Foundry
      run: |
        if [ "${{ github.event.inputs.region }}" = "SG" ]; then
          cf login -a ${{ env.CF_API }} -u "${{ secrets.EMAIL }}" -p "${{ secrets.PASSWORD }}" -o "${{ secrets.SG_ORG }}" -s "${{ secrets.SPACE }}"
        elif [ "${{ github.event.inputs.region }}" = "US" ]; then
          cf login -a ${{ env.CF_API }} -u "${{ secrets.EMAIL }}" -p "${{ secrets.PASSWORD }}" -o "${{ secrets.US_ORG }}" -s "${{ secrets.SPACE }}"
        fi

    - name: Deploy application
      run: |
        cf push ${{ env.APP_NAME }} --docker-image ${{ env.DOCKER_IMAGE }} -m ${{ env.MEMORY }} --health-check-type port

    - name: Set environment variables
      run: |
        # 基础环境变量
        cf set-env ${{ env.APP_NAME }} NAME "SAP"
        cf set-env ${{ env.APP_NAME }} ID "${{ secrets.UUID }}"
        cf set-env ${{ env.APP_NAME }} NESERVER "${{ secrets.NEZHA_SERVER }}"
        cf set-env ${{ env.APP_NAME }} NEPORT "${{ secrets.NEZHA_PORT }}"
        cf set-env ${{ env.APP_NAME }} NEID "${{ secrets.NEZHA_UUID }}"
        cf set-env ${{ env.APP_NAME }} NEKEY "${{ secrets.NEZHA_KEY }}"
        cf set-env ${{ env.APP_NAME }} NETLS "${{ secrets.NEZHA_TLS }}"
        cf set-env ${{ env.APP_NAME }} ARDOMAIN "${{ secrets.ARGO_DOMAIN }}"
        cf set-env ${{ env.APP_NAME }} ARAUTH "${{ secrets.ARGO_AUTH }}"
        cf set-env ${{ env.APP_NAME }} WS "${{ secrets.WSPATH }}"
        cf set-env ${{ env.APP_NAME }} ENCRYPTION "${{ secrets.ENCRYPTION }}"
        cf set-env ${{ env.APP_NAME }} WARP_CONFIG_SECRET "${{ secrets.WARP_CONFIG_SECRET }}"
        cf set-env ${{ env.APP_NAME }} WARP_CONFIG_IPV6 "${{ secrets.WARP_CONFIG_IPV6 }}"
        cf set-env ${{ env.APP_NAME }} WARP_CONFIG_RESERVED "${{ secrets.WARP_CONFIG_RESERVED }}"
        cf set-env ${{ env.APP_NAME }} WARP_CONFIG_ENDPOINT "${{ secrets.WARP_CONFIG_ENDPOINT }}"

        # 可选：从文件读取环境变量(如果存在)
        if [ -f .env ]; then
          while IFS= read -r line; do
            if [[ ! "$line" =~ ^# ]] && [[ -n "$line" ]]; then
              IFS='=' read -r key value <<< "$line"
              cf set-env ${{ env.APP_NAME }} "$key" "$value"
            fi
          done < .env
        fi

    - name: Restage application
      run: |
        cf restage ${{ env.APP_NAME }}

    - name: Verify deployment
      run: |
        cf app ${{ env.APP_NAME }}
        echo "Deployment completed successfully!"
